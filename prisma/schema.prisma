// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["users", "sessions", "posts", "tags"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("sessions")
}

model User {
  id               String              @id @default(cuid())
  username         String?             @unique
  name             String?
  email            String?             @unique
  image            String
  comments         PostComment[]
  commentReactions CommentReaction[]
  postReactions    PostReaction[]
  accounts         Account[]
  sessions         Session[]
  post             Post[]
  notifications    UserNotifications[]

  @@unique([id, name, image])
  @@unique([id, name, username, image])
  @@schema("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("sessions")
}

model Post {
  id             String         @id @default(cuid())
  titleId        String         @unique
  userId         String
  author         String
  authorUsername String?
  authorImage    String
  reactions      PostReaction[]
  comments       PostComment[]
  user           User           @relation(fields: [userId, author, authorImage], references: [id, name, image])

  @@schema("posts")
}

model PostComment {
  id                 String            @id @default(uuid())
  postId             String
  userId             String
  userName           String
  userImage          String
  userUsername       String?
  content            Json
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  postCommentReplyId String?
  postCommentReplies PostComment[]     @relation("PostCommentReply")
  postCommentReply   PostComment?      @relation("PostCommentReply", fields: [postCommentReplyId], references: [id])
  reactions          CommentReaction[]
  user               User?             @relation(fields: [userId, userName, userUsername, userImage], references: [id, name, username, image], onDelete: Cascade)
  post               Post              @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@schema("posts")
}

model CommentReaction {
  id        String      @id @default(uuid())
  commentId String
  userId    String
  userName  String
  userImage String
  type      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  comment   PostComment @relation(fields: [commentId], references: [id])
  user      User        @relation(fields: [userId, userName, userImage], references: [id, name, image], onDelete: Cascade)

  @@unique([commentId, userId])
  @@schema("posts")
}

model PostReaction {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  userName  String
  userImage String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId, userName, userImage], references: [id, name, image], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@schema("posts")
}

model UserNotifications {
  id        String   @id @default(uuid())
  userId    String
  from      String?
  fromImage String?
  message   String
  actionUrl String
  createdAt DateTime @default(now())
  new       Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])

  @@schema("users")
}
